Создаём workflow

Создайте в папке taski-docker/ директорию .github/workflows, а в ней — файл main.yml.

taski-docker
├── .github
│   └── workflows
│       └── main.yml # Вот новый файл
├── LICENSE
├── README.md
├── backend
│   ├── .dockerignore
│   ├── .env
│   ├── Dockerfile
│   ├── api
│   ├── backend
│   ├── manage.py
│   └── requirements.txt
├── docker-compose.production.yml
├── docker-compose.yml
├── frontend
│   ├── .dockerignore
│   ├── .gitignore
│   ├── Dockerfile
│   ├── README.md
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   └── src
└── nginx
    ├── Dockerfile
    └── nginx.conf

Если в качестве триггера для workflow будет указано событие git push, то сервис GitHub Actions выполнит инструкции, описанные в этом файле сразу, как только этот файл будет запушен на GitHub.
Добавьте в файл описание workflow — это YAML-словарь с заданными названиями ключей:

# Файл main.yml
# Имя workflow
name: Main Taski Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
  # Единственная задача — склонировать код 
  # и вывести в консоль дерево файлов
  checkout-and-print-tree:
    runs-on: ubuntu-latest
    steps:
      # На GitHub Actions есть готовые описания шагов, 
      # их можно использовать в своих workflow.
      # Применим готовое описание шага для получения исходного кода
      - name: Check out repository code  # Имя шага задаём сами
        uses: actions/checkout@v3  # Берём готовое решение из библиотеки GitHub Actions
      # Выполняем команду tree в текущей директории
      - name: Print project tree
        run: tree .






