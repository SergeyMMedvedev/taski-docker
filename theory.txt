Создаём workflow

Создайте в папке taski-docker/ директорию .github/workflows, а в ней — файл main.yml.

taski-docker
├── .github
│   └── workflows
│       └── main.yml # Вот новый файл
├── LICENSE
├── README.md
├── backend
│   ├── .dockerignore
│   ├── .env
│   ├── Dockerfile
│   ├── api
│   ├── backend
│   ├── manage.py
│   └── requirements.txt
├── docker-compose.production.yml
├── docker-compose.yml
├── frontend
│   ├── .dockerignore
│   ├── .gitignore
│   ├── Dockerfile
│   ├── README.md
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   └── src
└── nginx
    ├── Dockerfile
    └── nginx.conf

Если в качестве триггера для workflow будет указано событие git push, то сервис GitHub Actions выполнит инструкции, описанные в этом файле сразу, как только этот файл будет запушен на GitHub.
Добавьте в файл описание workflow — это YAML-словарь с заданными названиями ключей:

# Файл main.yml
# Имя workflow
name: Main Taski Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
  # Единственная задача — склонировать код 
  # и вывести в консоль дерево файлов
  checkout-and-print-tree:
    runs-on: ubuntu-latest
    steps:
      # На GitHub Actions есть готовые описания шагов, 
      # их можно использовать в своих workflow.
      # Применим готовое описание шага для получения исходного кода
      - name: Check out repository code  # Имя шага задаём сами
        uses: actions/checkout@v3  # Берём готовое решение из библиотеки GitHub Actions
      # Выполняем команду tree в текущей директории
      - name: Print project tree
        run: tree .

Клонирование кода и запуск линтера
Удалите из файла main.yml в Taski всё, что там было: начнём с чистого листа. Первая задача: проверить код на соответствие PEP8 с помощью flake8.
Вставьте в файл .github/workflows/main.yml новый код workflow:

# .github/workflows/main.yml
name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest

    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    # Запускаем flake8
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m flake8 backend/

Чтобы автоматически запустить эти тесты в workflow, допишите инструкции в main.yml:

# .github/workflows/main.yml
name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    # Чтобы запустить тесты, нужно установить зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    # Этот шаг дополним:
    - name: Test with flake8 and django tests
      # Команд стало больше одной; ставим символ | и пишем команды построчно
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test

Тесты запустились, но сразу упали с ошибкой подключения к БД. Что-то пошло не так.

Когда для работы проекта использовалась СУБД SQLite, тесты могли создать себе временную БД автоматически. Но теперь Django-проект настроен на использование сервера PostgreSQL, а запустить сервер PostgreSQL тесты не могут. В результате тесты считают, что проект не работает. Чтобы это исправить, нужно развернуть сервер PostgreSQL для прогона тестов.
В GitHub Actions предусмотрена возможность запуска дополнительных серверов. В описании workflow можно добавить блок services и описать в нём, какие сервисы нужно запустить.


Для удобства запуска дополнительных сервисов на раннерах по умолчанию установлен докер, а сами сервисы описываются и запускаются так же, как в docker-compose.yml.
Чтобы установить и запустить сервер PostgreSQL:
запускаем контейнер из образа postgres:13.10;
прокидываем порт 5432 хоста (раннера) на такой же порт контейнера;
указываем переменные окружения для запуска тестов, чтобы Django знал, куда отправлять запросы к БД: передаём доступы к БД, её адрес и порт.
Обновите main.yml:

name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test